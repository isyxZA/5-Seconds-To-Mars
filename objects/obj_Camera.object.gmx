<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !view_enabled {
    view_visible[0] = true;
    view_enabled = true;
}

//view_xview[0] = x-(view_wview[0]*0.5);
//view_yview[0] = y-(view_hview[0]*0.5);

my_view = 0;
view_ratio = 1.777777777777778;//1080p
target_width  = 960;
start_view_x = view_wview;
start_view_y = view_hview;

audio_listener_orientation(0, 1, 0, 0, 0, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//CAMERA ZOOM CONTROL//
//Set zoom level
if global.can_zoom == true &amp;&amp; global.game_over == false {
    x = global.rocket_x;
    y = global.rocket_y;
    if mouse_wheel_up() || keyboard_check_pressed(vk_add) { 
        if global.zoom_level != 0 {
            global.zoom_level -= 2;
            if global.zoom_level &lt; 0 { global.zoom_level = 0; }
        }
    } 
    if mouse_wheel_down() || keyboard_check_pressed(vk_subtract) { 
        if global.zoom_level != 10 {
            global.zoom_level += 2;
            if global.zoom_level &gt; 10 { global.zoom_level = 10; }
        }
    }
    //Set target width and height according to zoom level
    switch global.zoom_level {
        case 0:
            target_width  = 960;
            break;
        case 2:
            target_width  = 1280;
            break;
        case 4:
            target_width  = 1600;
            break;
        case 6:
            target_width  = 2048;
            break;
        case 8:
            target_width  = 2880;
            break;
        case 10:
            target_width  = 3840;
            break;
    }
    //Zoom the view to target
    if view_wview[my_view] != target_width {
        var view_dif = (view_wview[my_view]-target_width);
        start_view_x = view_wview[my_view];
        start_view_y = view_hview[my_view];
        if view_wview[my_view] &lt; target_width { 
            view_wview[my_view] -= (view_dif*global.zoom_speed); 
            view_hview[my_view]  = view_wview[my_view]/view_ratio;
        }
            else if view_wview[my_view] &gt; target_width { 
                view_wview[my_view] += (view_dif*-global.zoom_speed);
                view_hview[my_view]  = view_wview[my_view]/view_ratio;
            }
    }
}

view_xview[0] = x-view_wview[0]*0.5;
view_yview[0] = y-view_hview[0]*0.5;
view_xview[1] = x-view_wview[1]*0.5;
view_yview[1] = y-view_hview[1]*0.5;

//Keeps the view inside the room
view_xview[my_view] = clamp(view_xview[my_view], 128, room_width  - (view_wview[my_view]+128));
view_yview[my_view] = clamp(view_yview[my_view], 128, room_height - (view_hview[my_view]+128));

audio_listener_position(x, y, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
