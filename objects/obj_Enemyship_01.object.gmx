<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Enemyship_01</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Enemy_Parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
e_type = "SHIP";
dir_thrust = 5000;
main_thrust = -500;
alarm[0] = 20;
phy_rotation = round(random_range(0, 259));
target_dir = point_direction(phy_position_x, phy_position_y, obj_Rocketship.phy_position_x, obj_Rocketship.phy_position_y)-90;
target_dist = point_distance(phy_position_x, phy_position_y, global.rocket_x, global.rocket_y)-90;
alarm[1] = target_dist*0.01;

emit = audio_emitter_create();
audio_emitter_falloff(emit, 200, 2000, 0.75);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = "ATTACK";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>target_dir = point_direction(phy_position_x, phy_position_y, global.rocket_x, global.rocket_y)-90;

target_diff = sin(degtorad(target_dir-image_angle));
      
if target_dist &gt; 600 { 
    if target_dist &gt; 2000 { 
        if (target_diff&lt;-0.3) { boost_r = true; boost_l = false; }
            else if (target_diff&gt;0.3){ boost_r = false; boost_l = true; }
                else { boost_r = false; boost_l = false; }
    }
        else if target_dist &gt; 1000 {
            if (target_diff&lt;-0.25) { boost_r = true; boost_l = false; }
                else if (target_diff&gt;0.25){ boost_r = false; boost_l = true; }
                    else { boost_r = false; boost_l = false; }
        }
            else if target_dist &gt; 800 {
                if (target_diff&lt;-0.2) { boost_r = true; boost_l = false; }
                    else if (target_diff&gt;0.2){ boost_r = false; boost_l = true; }
                        else { boost_r = false; boost_l = false; }
            }
    if (boost_l == false) &amp;&amp; (boost_r == false) { boost_m = true; }
        else { boost_m = false; }
}
     else { 
        if (target_diff&lt;-0.15) { boost_r = true; boost_l = false; }
            else if (target_diff&gt;0.15){ boost_r = false; boost_l = true; }
                else { boost_r = false; boost_l = false; }
        boost_m = false; 
     }

if (target_dist &lt; 800) { 
    if global.game_over == false {
        if (boost_l == false) &amp;&amp; (boost_r == false) { can_shoot = true; }  
    }
}

//DIRECTIONAL THRUST
if boost_r == true { physics_apply_torque(dir_thrust); }
if boost_l == true { physics_apply_torque(-dir_thrust); }

alarm[0] = 18;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_emitter_position(emit, phy_position_x, phy_position_y, 1);

target_dist = point_distance(phy_position_x, phy_position_y, global.rocket_x, global.rocket_y); 
scale = 1.5-(target_dist*0.0005); 
scale = clamp(scale, 0.5, 1.5);

//State Control
switch state {
    case "ATTACK":
        if boost_m == true { 
            physics_apply_local_force(0, 16,  0, main_thrust); 
            exhaust_fx = true;
            ex_img += 1;
            if ex_img &gt; 7 { ex_img = 0; }
        }
            else { ex_img = 0; exhaust_fx = false; }
        if can_shoot == true {
            audio_play_sound_on(emit, snd_EnemyLaser, false, 1);
            can_shoot = false;
            x_force = lengthdir_x(10000, (image_angle+90));
            y_force = lengthdir_y(10000, (image_angle+90));
            with instance_create(phy_position_x, phy_position_y, obj_E_Bullet_01) {
                rot = -other.phy_rotation;
                x_force = other.x_force;
                y_force = other.y_force;
            }
        }
        break;
    case "IDLE":
        ex_img = 0; exhaust_fx = false;
        break;
}

phy_speed_x = clamp(phy_speed_x, -6, 6);
phy_speed_y = clamp(phy_speed_y, -6, 6);

//if phy_rotation &lt; 0 { phy_rotation = 360 }
//if phy_rotation &gt; 360 { phy_rotation = 0; }

if e_health &lt;= 0 { 
    destroy = true; 
}

if destroy == true {
    destroy = true;
    audio_play_sound_on(emit, snd_Explode_01, false, 7);
    effect_create_above(ef_ring, x, y, 2, c_blue);
    effect_create_above(ef_ellipse, x, y, 1, c_silver);
    instance_create(phy_position_x, phy_position_y, obj_Ex_04);
    instance_destroy();
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, 0, phy_position_x, phy_position_y, scale, scale, -phy_rotation, c_white, 1);

if exhaust_fx = true { 
    draw_sprite_ext(spr_Exhaust_02, ex_img, phy_position_x, phy_position_y, scale, scale, -phy_rotation, c_white, 1);
}

//draw_text(x, y-40, string(target_diff));
//draw_text(x, y+40, string(image_angle));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.5</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,28</point>
    <point>54,28</point>
    <point>54,100</point>
    <point>10,100</point>
  </PhysicsShapePoints>
</object>
