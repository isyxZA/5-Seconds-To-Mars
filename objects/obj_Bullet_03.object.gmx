<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Missile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>obj_Dynamic_Parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x_force = 0;
y_force = 0;
rot = 0;
dir_thrust = 600;
boost_l = false;
boost_r = false;
boost_m = false;
can_damage = true;
target = -1;
target_lock = false;
lock_range = 960;
lock_timer = 0;
target_dir = 0;
target_x = 0;
target_y = 0;
ex_img = 0;
phy_fixed_rotation = true;
phy_linear_damping = 0.1;
alarm[0] = 20;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>target = instance_nearest(phy_position_x, phy_position_y, choose(obj_Enemyship_01, obj_Enemyship_02, obj_Enemyship_03));
target_dist = point_distance(phy_position_x, phy_position_y, target.phy_position_x, target.phy_position_y);

if target_dist &lt; lock_range {
    target_lock = true;
    lock_timer = 0; 
    target_x = target.phy_position_x;
    target_y = target.phy_position_y;
    target_dir = point_direction(phy_position_x, phy_position_y, target_x, target_y)-90; 
    phy_fixed_rotation = false;
    phy_linear_damping = 0;
}
    else { alarm[0] = 2; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if target_lock == true {  
    if boost_m == false {
        if (-phy_rotation&gt;(target_dir+5)) { boost_r = true; boost_l = false; }
            else if (-phy_rotation&lt;(target_dir-5)){ boost_r = false; boost_l = true; }
                else { boost_r = false; boost_l = false; boost_m = true; phy_fixed_rotation = true; }
        if boost_r == true { physics_apply_torque(dir_thrust); }
        if boost_l == true { physics_apply_torque(-dir_thrust); }
        lock_timer ++;
        if lock_timer &gt; 200 {
            if boost_m == false { 
                lock_range += 100;
                boost_l = false; 
                boost_r = false; 
                target_lock = false; 
                alarm[0] = 2; 
            }
        }
    }
        else if boost_m == true { 
            physics_apply_local_impulse(phy_position_x, phy_position_y+16, 0, -3000);
        }
}
    
ex_img += 1;
if ex_img &gt; 7 { ex_img = 0; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Enemy_Parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if can_damage == true {
    can_damage = false;
    with other { 
        if e_type == "BULLET" { instance_destroy(); }
            else if e_type == "STATION" { e_health -= 50; }
                else { e_health -= 100; }
    }
    effect_create_above(ef_flare, x, y, 2, c_silver);
    effect_create_above(ef_ring, x, y, 2, c_red);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_E_Bullet_01">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if can_damage == true {
    can_damage = false;
    with other { instance_destroy(); }
    effect_create_above(ef_flare, x, y, 2, c_silver);
    effect_create_above(ef_ring, x, y, 0.75, c_red);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if boost_m == true {
    draw_sprite_ext(spr_Missile_Exhaust, ex_img, phy_position_x, phy_position_y, 1.2, 1.5, -phy_rotation, c_red, 1);
}
    else {
        draw_sprite_ext(spr_Missile_Exhaust, ex_img, phy_position_x, phy_position_y, 1, 1, -phy_rotation, c_white, 1);
    }

draw_sprite_ext(sprite_index, 0, phy_position_x, phy_position_y, 1, 1, -phy_rotation, c_white, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>-1</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>10</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>5,0</point>
    <point>11,0</point>
    <point>11,42</point>
    <point>5,42</point>
  </PhysicsShapePoints>
</object>
