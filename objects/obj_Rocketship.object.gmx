<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Rocketship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Dynamic_Parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>health = 100;
can_shoot = true;
can_be_hurt = true;
main_thrust = -250;
thrust_rate = 0.015;
dir_thrust = 0.15;
scale = 1;
rocket_angle = image_angle;
shield_on = false;
shield_snd = snd_Shield;
engine_snd = snd_EngineMain;
thrust1_snd = snd_Thrust1;
thrust2_snd = snd_Thrust2;

dthrust_rate = 0.1;
shield_rate = 0.05;
nav_rate = 0.02;
laser_rate = 0.2;
missile_rate = 0.5;
pdc_rate = 0.1;

weapon_select = 1;
weapon = "LASER";
x_force = 0;
y_force = 0;

destroy_fx = true;
exhaust_fx = false;
exhaust_fx_l = false;
exhaust_fx_r = false;
ex_img = 0;
ex_img_l = 0;
ex_img_r = 0;
sx_img = 0;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_shoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.x_speed = phy_speed_x;
global.y_speed = phy_speed_y;
rocket_angle = -phy_rotation;

if global.game_over == false {
    global.rocket_x = phy_position_x;
    global.rocket_y = phy_position_y;
    
    //DIRECTIONAL THRUST
    if keyboard_check(ord("D")) { 
        audio_play_sound(thrust1_snd, 1, true);
        exhaust_fx_r = true; 
        ex_img_r += 0.5;
        if ex_img_r &gt; 3 { ex_img_r = 0; }
        physics_apply_torque(100); 
    } 
        else { ex_img_r = 0; exhaust_fx_r = false; audio_stop_sound(thrust1_snd); }
    if keyboard_check(ord("A")) { 
        audio_play_sound(thrust2_snd, 1, true);
        ex_img_l += 0.5;
        if ex_img_l &gt; 3 { ex_img_l = 0; }
        exhaust_fx_l = true; 
        physics_apply_torque(-100); 
    } 
        else { ex_img_l = 0; exhaust_fx_l = false; audio_stop_sound(thrust2_snd); }
        
    if phy_rotation &lt; 0 { phy_rotation = 360 }
    if phy_rotation &gt; 360 { phy_rotation = 0; }
    
    //MAIN THRUST
    if keyboard_check(ord("W")) { 
        if global.thrust_countdown &gt; 0 {
            audio_play_sound(engine_snd, 6, true);
            physics_apply_local_force(0, 16,  0, main_thrust); 
            global.thrust_countdown -= thrust_rate;
            exhaust_fx = true;
            ex_img += 0.5;
            if ex_img &gt; 7 { ex_img = 0; }
        }
            else { ex_img = 0; exhaust_fx = false; audio_stop_sound(engine_snd);  }
    }
        else { ex_img = 0; exhaust_fx = false; audio_stop_sound(engine_snd); }
        
    //SHIELD
    if keyboard_check_pressed(ord("E")) { 
        if global.power_level &gt; 0 &amp;&amp; global.shield_health &gt; 0 {  
            if shield_on == false { shield_on = true; audio_play_sound(shield_snd, 1, true); }
                else { audio_stop_sound(shield_snd); shield_on = false; }
        }
    }
    if global.power_level &gt; 0 &amp;&amp; global.shield_health &gt; 0 {
        if shield_on == true { 
            global.power_level -= shield_rate; 
            sx_img += 0.25;
            if sx_img &gt; 11 { sx_img = 0; }
            }
    }
        else { audio_stop_sound(shield_snd); shield_on = false; sx_img = 0; }
        
    //WEAPON SELECT
    if keyboard_check_pressed(ord("Q")) {  
        if global.game_over == false {
            audio_play_sound(snd_Tone_01, 1, false);
            weapon_select += 1;
            if weapon_select &gt; 3 { weapon_select = 1; }
            switch weapon_select {
                case 1:
                    weapon = "LASER";
                    break;
                case 2:
                    weapon = "PDC";
                    break;
                case 3:
                    weapon = "MISSILE";
                    break;
            }
        }
    }
    
    //SHOOT
    if keyboard_check(vk_space) || mouse_check_button(mb_right) || mouse_check_button(mb_left) {
        if global.power_level &gt; 0 &amp;&amp; can_shoot == true {
            can_shoot = false;
            switch weapon {
                case "LASER":
                    if global.laser_level &gt; 0 {
                        audio_play_sound(snd_Laser_01, 5, false);
                        x_force = lengthdir_x(10000, (image_angle+90));
                        y_force = lengthdir_y(10000, (image_angle+90));
                        with instance_create(phy_position_x+(x_force*0.0025), phy_position_y+(y_force*0.0025), obj_Bullet_01) {
                            rot = -other.phy_rotation;
                            x_force = other.x_force;
                            y_force = other.y_force;
                        }
                        global.power_level -= laser_rate;
                        global.laser_level -= 1;
                    }
                    alarm[0] = 6;
                    break;
                case "PDC":
                    if global.pdc_level &gt; 0 {
                        audio_play_sound(snd_PDC_01, 5, false);
                        x_force = lengthdir_x(10000, (image_angle+90));
                        y_force = lengthdir_y(10000, (image_angle+90));
                        with instance_create(phy_position_x+(x_force*0.002)+16, phy_position_y+(y_force*0.002), obj_Bullet_02) {
                            rot = -other.phy_rotation;
                            x_force = other.x_force;
                            y_force = other.y_force;
                        }
                        with instance_create(phy_position_x+(x_force*0.002)-16, phy_position_y+(y_force*0.002), obj_Bullet_02) {
                            rot = -other.phy_rotation;
                            x_force = other.x_force;
                            y_force = other.y_force;
                        }
                        global.power_level -= pdc_rate;
                        global.pdc_level -= 2;
                    }
                    alarm[0] = 3;
                    break;
                case "MISSILE":
                    if global.missile_level &gt; 0 {
                        audio_play_sound(snd_MissileLaunch, 5, false);
                        x_force = lengthdir_x(10000, (image_angle+90));
                        y_force = lengthdir_y(10000, (image_angle+90));
                        with instance_create(phy_position_x+(x_force*0.002), phy_position_y+(y_force*0.002), obj_Bullet_03) {
                            phy_rotation = other.phy_rotation;
                            x_force = other.x_force;
                            y_force = other.y_force;
                            physics_apply_local_impulse(phy_position_x, phy_position_y+16, 0, -300);
                        }
                        global.power_level -= missile_rate;
                        global.missile_level -= 1;
                    }
                    alarm[0] = 12;
                    break;
            }
        }
    }
    
    if obj_GUI.display_map == true { global.power_level -= nav_rate; }
    
    //SCALE CONTROL
    var d = point_distance(phy_position_x, phy_position_y, obj_Earth.x, obj_Earth.y)*0.001;
    if d &lt; 1 { 
        scale = max(0.6,d); 
    } 
        else { scale = 1; }
        
    //HEALTH
    if health &lt;= 0 { 
        if destroy_fx == true {
            destroy_fx = false;
            global.kia = true;
            audio_play_sound(snd_Explode_Rocket, 7, false);
            effect_create_above(ef_ring, phy_position_x, phy_position_y, 2, c_red);
            effect_create_above(ef_ellipse, x, y, 2, c_red);
            instance_create(phy_position_x, phy_position_y, obj_Ex_01);
            global.game_over = true; 
        }
    }
}
    //GAME OVER
    else {
        phy_position_x = 32;
        phy_position_y = 32;
        phy_speed_x = 0;
        phy_speed_y = 0;
        global.rocket_x = obj_Camera.x;
        global.rocket_y = obj_Camera.y;
        //global.rocket_x = room_width*0.5;
        //global.rocket_y = room_height*0.5;
        if shield_on == true { audio_stop_sound(shield_snd); shield_on = false; }
        if exhaust_fx == true { audio_stop_sound(engine_snd); exhaust_fx = false; }
        audio_stop_sound(thrust1_snd);
        audio_stop_sound(thrust2_snd);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.game_over = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, 0, phy_position_x, phy_position_y, scale, scale, -phy_rotation, c_white, 1);

if exhaust_fx_l = true { 
    draw_sprite_ext(spr_Dir_Exhaust_L, ex_img_l, phy_position_x, phy_position_y, scale, scale, -phy_rotation, c_white, 1);
}

if exhaust_fx_r = true { 
    draw_sprite_ext(spr_Dir_Exhaust_R, ex_img_r, phy_position_x, phy_position_y, scale, scale, -phy_rotation, c_white, 1);
}

draw_set_blend_mode(bm_add);
if exhaust_fx = true { 
    draw_sprite_ext(spr_Exhaust_01, ex_img, phy_position_x, phy_position_y, scale, scale, -phy_rotation, c_white, 1);
}
if shield_on == true {
    draw_sprite_ext(spr_Rocketship_Shield, sx_img, phy_position_x, phy_position_y, scale, scale, -phy_rotation, c_white, 0.65);
}
draw_set_blend_mode(bm_normal);


/*
var xpos = round(phy_position_x);
var ypos = round(phy_position_y);
draw_text(x, y-32, string(ypos));
draw_text(x, y-48, string(image_angle));
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>-1</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,6</point>
    <point>20,6</point>
    <point>28,20</point>
    <point>28,60</point>
    <point>4,60</point>
    <point>4,20</point>
  </PhysicsShapePoints>
</object>
