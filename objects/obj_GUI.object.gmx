<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_visible[1] = true;
view_wview[1] = 7680;
view_hview[1] = 4320;
display_map = false;
surf_ratio = 0.25;
map_w = display_get_gui_width()*surf_ratio;//480
map_h = display_get_gui_height()*surf_ratio;//270
map_x = (display_get_gui_width()*0.5)-(map_w*0.5);
map_y = (display_get_gui_height()-20);
map_surf = -1;

mars_x = 0;
mars_y = 0;
mars_dist = 0;
mars_dir = 0;

speed_alert = false;
victory = false;
dialog_count = 0;
txt1 = "";
txt2 = "";
txt3 = "";
adj1 = 0;
diag_choose = true;
diag = 0;

scale1 = 1;
i1 = 0.1;
alarm[0] = 3;

t_a = 1;
transition = false;

tb_x = display_get_width()*0.175;
tb_y = display_get_height()*0.8;

hb_x = display_get_width()*0.255;
hb_y = display_get_height()*0.89;

sb_x = display_get_width()*0.305;
sb_y = display_get_height()*0.89;

lb_x = display_get_width()*0.68;
lb_y = display_get_height()*0.89;

cb_x = display_get_width()*0.715;
cb_y = display_get_height()*0.89;

mb_x = display_get_width()*0.75;
mb_y = display_get_height()*0.89;

pb_x = display_get_width()*0.825;
pb_y = display_get_height()*0.8;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_Map_OFF, 1, false);
display_map = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Defeat dialog
display_map = true;
audio_play_sound(snd_Map_ON, 1, false);
dialog_count ++;
switch dialog_count {
    case 1:
        if  diag == 0 {
            txt1 = "Navigator Carlson:"
            txt2 = "All is lost Captain! All is lost!"
        }
        alarm[2] = 300;
        alarm[3] = 200;
        break;
    case 2:
        if  diag == 0 {
            txt1 = "Engineeer Dee:"
            txt2 = "We'll never make it now."
        }
        alarm[2] = 600;
        alarm[3] = 200;
        break;
    case 3:
        if  diag == 0 {
            txt1 = "Engineer Dee:"
            txt2 = "If only we used our fuel more efficiently."
        }
        alarm[2] = 400;
        alarm[3] = 200;
        break;
    case 4:
        if  diag == 0 {
            txt1 = "Navigator Carlson:"
            txt2 = "We wouldn't be in this mess, now would we!"
        }
        alarm[2] = 600;
        alarm[3] = 200;
        break;
    case 5:
        if  diag == 0 {
            txt1 = "Chef Amos:"
            txt2 = "Now we're all gonna suffocate or freeze or worse!"
        }
        alarm[2] = 600;
        alarm[3] = 200;
        break;
    case 6:
        if  diag == 0 {
            txt1 = "Navigator Carlson:"
            txt2 = "Why are you on the bridge Amos? Go tend to the cookies."
        }
        alarm[2] = 600;
        alarm[3] = 200;
        break;
    case 7:
        if  diag == 0 {
            txt1 = "Chef Amos:"
            txt2 = "We can't eat cookies if we're dead Carlson!"
        }
        alarm[2] = 500;
        alarm[3] = 200;
        break;
    case 8:
        if  diag == 0 {
            txt1 = "Navigator Carlson:"
            txt2 = "Still, you smell like onions and garlic."
        }
        alarm[2] = 700;
        alarm[3] = 200;
        break;
    case 9:
        if  diag == 0 {
            txt1 = "Engineer Dee:"
            txt2 = "Carlson is right Amos."
        }
        alarm[2] = 600;
        alarm[3] = 200;
        break;
    case 10:
        if  diag == 0 {
            txt1 = "Engineer Dee:"
            txt2 = "And I'd rather slowly suffocate to death without the smell."
        }
        alarm[2] = 600;
        alarm[3] = 200;
        break;
    case 11:
        if  diag == 0 {
            txt1 = "Chef Amos:"
            txt2 = "Screw you guys! I'm outa here."
        }
        alarm[2] = 220;
        alarm[3] = 180;
        break;
    case 12:
        txt1 = "";
        txt2 = "";
        txt3 = "";
        game_restart();
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Victory dialog
display_map = true;
audio_play_sound(snd_Map_ON, 1, false);
dialog_count ++;
switch dialog_count {
    case 1:
        if  diag == 0 {
            txt1 = "Navigator Carlson:"
            txt2 = "Well done Captain! Well done!"
        }
        alarm[1] = 600;
        alarm[3] = 200;
        break;
    case 2:
        if  diag == 0 {
            txt1 = "Engineer Dee:"
            txt2 = "Can't believe we actually made it."
        }
        alarm[1] = 600;
        alarm[3] = 200;
        break;
    case 3:
        if  diag == 0 {
            txt1 = "Engineer Dee:"
            txt2 = "That was some ace piloting there Cap'n."
        }
        alarm[1] = 500;
        alarm[3] = 200;
        break;
    case 4:
        if  diag == 0 {
            txt1 = "Chef Amos:"
            txt2 = "Let's celebrate! Who's hungry?"
        }
        alarm[1] = 800;
        alarm[3] = 200;
        break;
    case 5:
        if  diag == 0 {
            txt1 = "Navigator Carlson:"
            txt2 = "Is that all you think about Amos? Food?"
        }
        alarm[1] = 600;
        alarm[3] = 200;
        break;
    case 6:
        if  diag == 0 {
            txt1 = "Engineer Dee:"
            txt2 = "I say we get some drinks instead. How bout it?"
        }
        alarm[1] = 600;
        alarm[3] = 200;
        break;
    case 7:
        if  diag == 0 {
            txt1 = "Navigator Carlson:"
            txt2 = "You know I don't drink Dee."
        }
        alarm[1] = 700;
        alarm[3] = 200;
        break;
    case 8:
        if  diag == 0 {
            txt1 = "Navigator Carlson:"
            txt2 = "How about we take a pic for instagram?"
        }
        alarm[1] = 400;
        alarm[3] = 200;
        break;
    case 9:
        if  diag == 0 {
            txt1 = "Chef Amos:"
            txt2 = "Ugh! Nobody follows your instagram anyways."
        }
        alarm[1] = 600;
        alarm[3] = 200;
        break;
    case 10:
        if  diag == 0 {
            txt1 = "Engineer Dee:"
            txt2 = "Drinks it is then!"
        }
        alarm[1] = 500;
        alarm[3] = 200;
        break;
    case 11:
        if  diag == 0 {
            txt1 = "Navigator Carlson:"
            txt2 = "Fine, but it's kombucha for me. Let's Party!"
        }
        alarm[1] = 400;
        alarm[3] = 200;
        break;
    case 12:
        txt1 = "";
        txt2 = "";
        txt3 = "";
        game_restart();
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if scale1 &gt;= 1.9 { i1 = -0.1; }
if scale1 &lt;= 0.1 { i1 = 0.1; }

scale1 += i1;

alarm[0] = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(ord("S")) { 
    if global.power_level &gt; 0 &amp;&amp; global.game_over == false {
        if display_map == false { audio_play_sound(snd_Map_ON, 1, false); display_map = true; }
            else { audio_play_sound(snd_Map_OFF, 1, false); display_map = false; }
    }
}

if global.power_level &gt; 0 &amp;&amp; global.game_over == false {
    if display_map == true {
        if map_h != display_get_gui_height()*surf_ratio { map_h = lerp(map_h, display_get_gui_height()*surf_ratio, 0.5); }
    }
        else {
            if map_h != 4 { map_h = lerp(map_h, 4, 0.5); }
        }
}
    else {
        if global.game_over == true &amp;&amp; global.kia == false {
            if display_map == true {
                if map_h != display_get_gui_height()*surf_ratio { map_h = lerp(map_h, display_get_gui_height()*surf_ratio, 0.5); }
            }
                else {
                    if map_h != 4 { map_h = lerp(map_h, 4, 0.5); }
                }
        }
            else { if map_h != 4 { map_h = lerp(map_h, 4, 0.5); } }
        
    }

mars_dir = point_direction(global.rocket_x, global.rocket_y, obj_Mars.x, obj_Mars.y);
mars_x = lengthdir_x(2000, mars_dir);
mars_y = lengthdir_y(2000, mars_dir);

mars_dist = point_distance(global.rocket_x, global.rocket_y, obj_Mars.x, obj_Mars.y);

if mars_dist &lt; 600 {
    if global.x_speed &lt; 5 &amp;&amp; global.y_speed &lt; 5 {
        global.game_over = true;
        victory = true;
        speed_alert = false;
    }
        else { speed_alert = true; }
}  
    else { speed_alert = false; }

if diag_choose == true &amp;&amp; global.game_over == true &amp;&amp; global.kia == false {
    diag_choose = false;
    view_wview[1] = 840;
    view_hview[1] = 420;
    if victory == true { alarm[1] = 100; }
        else { alarm[2] = 100; }

}
    
if transition == true { if t_a &lt; 1 { t_a += 0.0125; } }
    else { if t_a &gt; 0.1 { t_a -= 0.0125; } }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if surface_exists(map_surf) {
    surface_set_target(map_surf);
    if global.game_over == false {
        draw_clear_alpha(c_black, 0.6);
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(spr_Map_Marker, 0, obj_Earth.x, obj_Earth.y, 8, 8, 0, c_orange, 1);
        draw_sprite_ext(spr_Map_Marker, 0, obj_Mars.x, obj_Mars.y, 8, 8, 0, c_green, 1);
        draw_sprite_ext(spr_Map_Marker, 0, global.rocket_x, global.rocket_y, scale1, scale1, 0, c_green, 1);
        with obj_Enemy_Parent { 
            if e_type == "SHIP" { draw_sprite_ext(spr_Map_Marker, 0, phy_position_x, phy_position_y, other.scale1*0.7, other.scale1*0.7, 0, c_red, 1); } 
                else if e_type == "STATION" { draw_sprite_ext(spr_Map_Marker, 0, phy_position_x, phy_position_y, other.scale1*1.2, other.scale1*1.2, 0, c_orange, 1); }
        }
        draw_set_colour(c_green);
        draw_set_alpha(0.5);
        draw_sprite_ext(spr_Arrow, 0, global.rocket_x+mars_x, global.rocket_y+mars_y, 1, 1, mars_dir, c_white, 1); 
        draw_set_colour(c_white);
        draw_set_alpha(1);
        draw_set_blend_mode(bm_normal);
    }
        else if global.game_over == true &amp;&amp; global.kia == false {
            draw_clear_alpha(c_black, 0.8);
            draw_set_font(fnt_20);
            draw_text_outline(view_xview[1]+view_wview[1]*0.5, view_yview[1]+view_hview[1]*0.35+adj1, txt1, 2, c_black, 4);
            //draw_set_font(fnt_16);
            draw_text_outline(view_xview[1]+view_wview[1]*0.5, view_yview[1]+view_hview[1]*0.5     , txt2, 2, c_black, 4);
        }
    surface_reset_target();
}
    else {
        map_surf = surface_create(display_get_gui_width()*surf_ratio, display_get_gui_height()*surf_ratio);
        surface_set_target(map_surf);
        draw_clear(c_black);
        surface_reset_target();
        view_surface_id[1] = map_surf;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if surface_exists(map_surf) {
    draw_surface_stretched_ext(map_surf, map_x, map_y-map_h, map_w, map_h, c_white, 1);
    draw_set_blend_mode(bm_add);
    draw_sprite_stretched_ext(spr_Border_Map_0, 0, map_x, map_y-map_h, map_w, map_h, c_white, 1);  
    draw_set_blend_mode(bm_normal);
    draw_sprite_stretched_ext(spr_Border_Map_1, 0, map_x, map_y-map_h, map_w, map_h, c_white, 1); 
    draw_sprite_ext(spr_Border_Map_2, 0, map_x, display_get_gui_height()-12, 1, 1, 0, c_white, 1);
}
    else {
        map_surf = surface_create(display_get_gui_width()*surf_ratio, display_get_gui_height()*surf_ratio);
        surface_set_target(map_surf);
        draw_clear(c_black);
        surface_reset_target();
        view_surface_id[1] = map_surf;
    }

draw_sprite_ext(spr_HUD, 0, display_get_gui_width()*0.5, 12, 1, 1, 0, c_white, 1);

if obj_Rocketship.shield_on == true  { draw_sprite_ext(spr_Border_S_ON, 0, sb_x, sb_y, 1, 1, 0, c_green, 1); }
if obj_Rocketship.weapon_select == 1 { draw_sprite_ext(spr_Border_S_ON, 0, lb_x, lb_y, 1, 1, 0, c_green, 1); }
if obj_Rocketship.weapon_select == 2 { draw_sprite_ext(spr_Border_S_ON, 0, cb_x, cb_y, 1, 1, 0, c_green, 1); }
if obj_Rocketship.weapon_select == 3 { draw_sprite_ext(spr_Border_S_ON, 0, mb_x, mb_y, 1, 1, 0, c_green, 1); }

//Thrust level
draw_sprite_ext(spr_Border_L, 0, tb_x, tb_y, 1, 1, 0, c_white, 1);
draw_set_alpha(0.4);
draw_healthbar(tb_x, tb_y, tb_x+80, tb_y+200, global.thrust_countdown*20, c_black, c_red, c_green, 3, false, true);
draw_rectangle_colour(tb_x, tb_y, tb_x+80, tb_y+200, c_silver, c_silver, c_silver, c_silver, true);
draw_set_alpha(1);

//Shield level
draw_sprite_ext(spr_Border_S, 0, sb_x, sb_y, 1, 1, 0, c_white, 1);
draw_set_alpha(0.4);
draw_healthbar(sb_x, sb_y, sb_x+40, sb_y+100, global.shield_health, c_black, c_red, c_green, 3, false, true);
draw_set_alpha(1);

//Hull health
draw_sprite_ext(spr_Border_S, 0, hb_x, hb_y, 1, 1, 0, c_white, 1);
draw_set_alpha(0.4);
draw_healthbar(hb_x, hb_y, hb_x+40, hb_y+100, health, c_black, c_red, c_green, 3, false, true);;
draw_set_alpha(1);

//Laser level
draw_sprite_ext(spr_Border_S, 0, lb_x, lb_y, 1, 1, 0, c_white, 1);
draw_set_alpha(0.4);
draw_healthbar(lb_x, lb_y, lb_x+40, lb_y+100, global.laser_level*0.5, c_black, c_red, c_green, 3, false, true);
draw_set_alpha(1);

//PDC level
draw_sprite_ext(spr_Border_S, 0, cb_x, cb_y, 1, 1, 0, c_white, 1);
draw_set_alpha(0.4);
draw_healthbar(cb_x, cb_y, cb_x+40, cb_y+100, global.pdc_level*0.1, c_black, c_red, c_green, 3, false, true);
draw_set_alpha(1);

//Missile level
draw_sprite_ext(spr_Border_S, 0, mb_x, mb_y, 1, 1, 0, c_white, 1);
draw_set_alpha(0.4);
draw_healthbar(mb_x, mb_y, mb_x+40, mb_y+100, global.missile_level*5, c_black, c_red, c_green, 3, false, true);
draw_set_alpha(1);


//Power
draw_sprite_ext(spr_Border_L, 0, pb_x-80, pb_y, 1, 1, 0, c_white, 1);
draw_set_alpha(0.4);
draw_healthbar(pb_x, pb_y, pb_x-80, pb_y+200, global.power_level, c_black, c_red, c_green, 3, false, true);
draw_rectangle_colour(pb_x, pb_y, pb_x-80, pb_y+200, c_silver, c_silver, c_silver, c_silver, true);
draw_set_alpha(1);

draw_set_halign(fa_center);
draw_set_colour(c_silver);

draw_set_font(fnt_20);
draw_text_outline(tb_x+40, tb_y+20, "T", 2, c_black, 4);
draw_text_outline(tb_x+40, tb_y+45, "H", 2, c_black, 4);
draw_text_outline(tb_x+40, tb_y+70, "R", 2, c_black, 4);
draw_text_outline(tb_x+40, tb_y+95, "U", 2, c_black, 4);
draw_text_outline(tb_x+40, tb_y+120, "S", 2, c_black, 4);
draw_text_outline(tb_x+40, tb_y+145, "T", 2, c_black, 4);

draw_text_outline(pb_x-40, pb_y+30, "P", 2, c_black, 4);
draw_text_outline(pb_x-40, pb_y+55, "O", 2, c_black, 4);
draw_text_outline(pb_x-40, pb_y+80, "W", 2, c_black, 4);
draw_text_outline(pb_x-40, pb_y+105, "E",2, c_black, 4);
draw_text_outline(pb_x-40, pb_y+130, "R",2, c_black, 4);

draw_text_outline(display_get_gui_width()*0.5, 10, "---DISTANCE TO MARS---",2, c_black, 4);


draw_set_font(fnt_16);
draw_text_outline(tb_x+40, tb_y-36, string(global.thrust_countdown), 2, c_black, 4);
draw_text_outline(pb_x-40, pb_y-36, string(global.power_level), 2, c_black, 4);

if speed_alert == false {
    draw_text_outline(display_get_gui_width()*0.5, 48, string(round(mars_dist-600)), 2, c_black, 4);
}
    else {
        draw_set_colour(c_red);
        draw_text_outline(display_get_gui_width()*0.5, 48, "TOO FAST!", 2, c_black, 4);
        draw_set_colour(c_silver);
    }

draw_text_outline(map_x+190  , display_get_gui_height()-40, "L.", 2, c_black, 4);
draw_text_outline(map_x+210, display_get_gui_height()-40, "A.", 2, c_black, 4);
draw_text_outline(map_x+230, display_get_gui_height()-40, "D.", 2, c_black, 4);
draw_text_outline(map_x+250, display_get_gui_height()-40, "A.", 2, c_black, 4);
draw_text_outline(map_x+270, display_get_gui_height()-40, "R.", 2, c_black, 4);

draw_set_font(fnt_12);
draw_text_outline(sb_x+20, sb_y-22, string(global.shield_health), 1, c_black, 4);
draw_text_outline(hb_x+20, hb_y-22, string(health), 1, c_black, 4);
draw_text_outline(lb_x+20, lb_y-22, string(global.laser_level), 1, c_black, 4);
draw_text_outline(cb_x+20, cb_y-22, string(global.pdc_level), 1, c_black, 4);
draw_text_outline(mb_x+20, mb_y-22, string(global.missile_level), 1, c_black, 4);



draw_set_font(fnt_10);
draw_text_outline(hb_x+20, hb_y+14, "H", 1, c_black, 4);
draw_text_outline(hb_x+20, hb_y+28, "U", 1, c_black, 4);
draw_text_outline(hb_x+20, hb_y+42, "L", 1, c_black, 4);
draw_text_outline(hb_x+20, hb_y+56, "L", 1, c_black, 4);

draw_text_outline(sb_x+20, sb_y+4, "S", 1, c_black, 4);
draw_text_outline(sb_x+20, sb_y+18, "H", 1, c_black, 4);
draw_text_outline(sb_x+20, sb_y+32, "I", 1, c_black, 4);
draw_text_outline(sb_x+20, sb_y+46, "E", 1, c_black, 4);
draw_text_outline(sb_x+20, sb_y+60, "L", 1, c_black, 4);
draw_text_outline(sb_x+20, sb_y+74, "D", 1, c_black, 4);

draw_text_outline(lb_x+20, lb_y+20, "H", 1, c_black, 4);
draw_text_outline(lb_x+20, lb_y+38, "E", 1, c_black, 4);
draw_text_outline(lb_x+20, lb_y+56, "L", 1, c_black, 4);

draw_text_outline(cb_x+20, cb_y+20, "P", 1, c_black, 4);
draw_text_outline(cb_x+20, cb_y+38, "D", 1, c_black, 4);
draw_text_outline(cb_x+20, cb_y+56, "C", 1, c_black, 4);

draw_text_outline(mb_x+20, mb_y+20, "H", 1, c_black, 4);
draw_text_outline(mb_x+20, mb_y+38, "S", 1, c_black, 4);
draw_text_outline(mb_x+20, mb_y+56, "M", 1, c_black, 4);

draw_set_font(fnt_16);


if global.game_over == true {
    if victory == true { 
        draw_sprite_ext(spr_Sucess, 0, display_get_gui_width()*0.5, display_get_gui_height()*0.35, 1,1,0, c_white, 1); 
        draw_sprite_ext(spr_Escape, 0, display_get_gui_width()*0.5, display_get_gui_height()*0.55, 1,1,0, c_white, 1);
        //Winning dialog
    } 
        else { 
            draw_sprite_ext(spr_Escape, 0, display_get_gui_width()*0.5, display_get_gui_height()*0.35, 1,1,0, c_white, 1); 
            draw_sprite_ext(spr_Failed, 0, display_get_gui_width()*0.5, display_get_gui_height()*0.55, 1,1,0, c_white, 1);
            if global.kia == false { 
                //Losing dialog
            }
        } 
}

draw_set_alpha(t_a);
draw_rectangle_colour(0, 0, display_get_gui_width(), display_get_gui_height(), c_black, c_black, c_black, c_black, false);
draw_set_alpha(1);



    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
